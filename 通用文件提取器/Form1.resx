<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AADblhLS25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YSwtuWEv7blhL825YS5duWEuHblhLh25YS4duWEuHblhLh25YS4duWEuHblhLh25YS4duW
        EuHblhLh25YS4duWEuHblhLh25YS4duWEuHblhLh25YS4duWEuHblhLh25YS4duWEuHblhLh25YS4duW
        EuHblhLh25YS5duWEvzblhLt25YS/9uWEuXblhI525YSHduWEh7blhIe25YSHtuWEh7blhIe25YSHtuW
        Eh7blhIe25YSHtuWEh7blhIe25YSHtuWEh7blhIe25YSHtuWEh7blhIe25YSHtuWEh7blhIe25YSHtuW
        Eh7blhIe25YSHtuWEh3blhI525YS5duWEvDblhL/25YS4duWEh7blhIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA25YSANuWEh7blhLi25YS8NuWEv/blhLh25YSHtuWEgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblhIA25YSHtuWEuLblhLw25YS/9uWEuHblhIe25YSAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblhIA25YSB9uWEgbblhIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWEgDblhIe25YS4tuWEvDblhL/25YS4duW
        Eh7blhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25YSANuWEg7blhKX25YSjNuV
        EgjblhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25YSANuWEh7blhLi25YS8NuW
        Ev/blhLh25YSHtuWEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblhIA25YSLNuW
        EuvblhLg25YSHduWEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblhIA25YSHtuW
        EuLblhLw25YS/9uWEuHblhIe25YSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuW
        EgDblhIu25YS7duWEuLblhIf25YSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuW
        EgDblhIe25YS4tuWEvDblhL/25YS4duWEh7blhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA25YSANuWEi3blhLt25YS4tuWEh/blhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA25YSANuWEh7blhLi25YS8NuWEv/blhLh25YSHtuWEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADblhIA25YSLduWEu3blhLi25YSH9uWEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADblhIA25YSHtuWEuLblhLw25YS/9uWEuHblhIe25YSAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWEgDblhIt25YS7duWEuLblhIf25YSAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWEgDblhIe25YS4tuWEvDblhL/25YS4duWEh7blhIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25YSANuWEi3blhLt25YS4tuWEh/blhIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25YSANuWEh7blhLi25YS8NuWEv/blhLh25YSHtuW
        EgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblhIA25YSLduWEu3blhLi25YSH9uW
        EgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblhIA25YSHtuWEuLblhLw25YS/9uW
        EuHblhIe25YSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWEgDblhIt25YS7duW
        EuLblhIf25YSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWEgDblhIe25YS4tuW
        EvDblhL/25YS4duWEh7blhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25YSANuW
        Ei3blhLt25YS4tuWEh/blhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25YSANuW
        Eh7blhLi25YS8NuWEv/blhLj25YSK9uWEQzblhEO25YRDtuWEQfblREA25YRAAAAAAAAAAAAAAAAAAAA
        AADblhIA25YSLduWEu3blhLi25YSH9uWEgAAAAAAAAAAAAAAAAAAAAAA2pYRANmWEQDblhIH25YRDtuW
        EQ7blhEM25YSK9uWEuPblhLw25YS/9uWEvnblhLQ25YSyduWEsrblhLM25YSltuWEQnblhEAAAAAAAAA
        AAAAAAAAAAAAANuWEgDblhIt25YS7duWEuLblhIf25YSAAAAAAAAAAAAAAAAAAAAAADblhIA25YSDtuW
        Ep7blhLL25YSytuWEsnblhLQ25YS+tuWEu7blhLG25YS59uWEunblhLp25YS6duWEuvblhKq25YRC9uW
        EQAAAAAAAAAAAAAAAAAAAAAA25YSANuWEi3blhLt25YS4tuWEh/blhIAAAAAAAAAAAAAAAAAAAAAANuW
        EgDblhIS25YSttuWEuvblhLp25YS6duWEunblhLn25YStNuWERXblhIm25YSJ9uWEifblhIn25YSJtuW
        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
        IP//gAH//8AD///gB///8A////gf///8P/8=
</value>
  </data>
</root>